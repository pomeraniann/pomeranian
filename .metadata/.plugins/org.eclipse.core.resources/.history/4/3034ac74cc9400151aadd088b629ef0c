<?php
/**************************************************

	アクセストークンの取得

**************************************************/

	// 設定項目
	$api_key = 'PTn6fVX7wKvUDABkec5M0QKlK' ;		// APIキー
	$api_secret = 'TeZbftHWUXvWoyHEKyIotVeNSLovgazCbRkZ8MikzPJ8yO3MuW' ;		// APIシークレット

	// Callback URL
	// * 自動的にこのプログラムのURLが指定されるようにしていますが、もし不具合がある場合は、直接、URLを指定して下さい。
	// * 例 ) $callback_url = 'https://syncer.jp/get-access-token.php' ;
	$callback_url = ( !isset($_SERVER['HTTPS']) || empty($_SERVER['HTTPS']) ? 'http://' : 'https://' ) . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] ;

	// 「連携アプリを認証」をクリックして帰ってきた時
	if( isset( $_GET['oauth_token'] ) && !empty( $_GET['oauth_token'] ) && isset( $_GET['oauth_verifier'] ) && !empty( $_GET['oauth_verifier'] ) )
	{
		// [リクエストトークン・シークレット]をセッションから呼び出す
		session_start() ;
		$request_token_secret = $_SESSION['oauth_token_secret'] ;

		// リクエストURL
		$request_url = 'https://api.twitter.com/oauth/access_token' ;

		// リクエストメソッド
		$request_method = 'POST' ;

		// キーを作成する
		$signature_key = rawurlencode( $api_secret ) . '&' . rawurlencode( $request_token_secret ) ;

		// パラメータ([oauth_signature]を除く)を連想配列で指定
		$params = array(
			'oauth_consumer_key' => $api_key ,
			'oauth_token' => $_GET['oauth_token'] ,
			'oauth_signature_method' => 'HMAC-SHA1' ,
			'oauth_timestamp' => time() ,
			'oauth_verifier' => $_GET['oauth_verifier'] ,
			'oauth_nonce' => microtime() ,
			'oauth_version' => '1.0' ,
		) ;

		// 配列の各パラメータの値をURLエンコード
		foreach( $params as $key => $value )
		{
			$params[ $key ] = rawurlencode( $value ) ;
		}

		// 連想配列をアルファベット順に並び替え
		ksort($params) ;

		// パラメータの連想配列を[キー=値&キー=値...]の文字列に変換
		$request_params = http_build_query( $params , '' , '&' ) ;

		// 変換した文字列をURLエンコードする
		$request_params = rawurlencode($request_params) ;

		// リクエストメソッドをURLエンコードする
		$encoded_request_method = rawurlencode( $request_method ) ;

		// リクエストURLをURLエンコードする
		$encoded_request_url = rawurlencode( $request_url ) ;

		// リクエストメソッド、リクエストURL、パラメータを[&]で繋ぐ
		$signature_data = $encoded_request_method . '&' . $encoded_request_url . '&' . $request_params ;

		// キー[$signature_key]とデータ[$signature_data]を利用して、HMAC-SHA1方式のハッシュ値に変換する
		$hash = hash_hmac( 'sha1' , $signature_data , $signature_key , TRUE ) ;

		// base64エンコードして、署名[$signature]が完成する
		$signature = base64_encode( $hash ) ;

		// パラメータの連想配列、[$params]に、作成した署名を加える
		$params['oauth_signature'] = $signature ;

		// パラメータの連想配列を[キー=値,キー=値,...]の文字列に変換する
		$header_params = http_build_query( $params , '' , ',' ) ;

		// リクエスト用のコンテキストを作成する
		$context = array(
			'http' => array(
				'method' => $request_method , //リクエストメソッド
				'header' => array(			  //カスタムヘッダー
					'Authorization: OAuth ' . $header_params ,
				) ,
			) ,
		) ;

		// cURLを使ってリクエスト
		$curl = curl_init() ;
		curl_setopt( $curl , CURLOPT_URL , $request_url ) ;
		curl_setopt( $curl , CURLOPT_HEADER, 1 ) ; 
		curl_setopt( $curl , CURLOPT_CUSTOMREQUEST , $context['http']['method'] ) ;			// メソッド
		curl_setopt( $curl , CURLOPT_SSL_VERIFYPEER , false ) ;								// 証明書の検証を行わない
		curl_setopt( $curl , CURLOPT_RETURNTRANSFER , true ) ;								// curl_execの結果を文字列で返す
		curl_setopt( $curl , CURLOPT_HTTPHEADER , $context['http']['header'] ) ;			// ヘッダー
		curl_setopt( $curl , CURLOPT_TIMEOUT , 5 ) ;										// タイムアウトの秒数
		$res1 = curl_exec( $curl ) ;
		$res2 = curl_getinfo( $curl ) ;
		curl_close( $curl ) ;

		// 取得したデータ
		$response = substr( $res1, $res2['header_size'] ) ;				// 取得したデータ(JSONなど)
		$header = substr( $res1, 0, $res2['header_size'] ) ;		// レスポンスヘッダー (検証に利用したい場合にどうぞ)

		// [cURL]ではなく、[file_get_contents()]を使うには下記の通りです…
		// $response = @file_get_contents( $request_url , false , stream_context_create( $context ) ) ;

		// リクエストが成功しなかった場合
		if( !isset( $response ) || empty( $response ) )
		{
			$error = 'リクエストが失敗してしまったようです。Twitterからの応答自体がありません…。' ;
		}
		else
		{
			// 文字列を[&]で区切る
			$parameters = explode( '&' , $response ) ;

			// エラー判定
			if( !isset( $parameters[1] ) || empty( $parameters[1] ) )
			{
				$error_msg = true ;
			}
			else
			{
				// それぞれの値を格納する配列
				$query = array() ;

				// [$parameters]をループ処理
				foreach( $parameters as $parameter )
				{
					// 文字列を[=]で区切る
					$pair = explode( '=' , $parameter ) ;

					// 配列に格納する
					if( isset($pair[1]) )
					{
						$query[ $pair[0] ] = $pair[1] ;
					}
				}

				// エラー判定
				if( !isset( $query['oauth_token'] ) || !isset( $query['oauth_token_secret'] ) )
				{
					$error_msg = true ;
				}
				else
				{
					// 各データの整理
					$access_token = $query['oauth_token'] ;		// アクセストークン
					$access_token_secret = $query['oauth_token_secret'] ;		// アクセストークン・シークレット
					$user_id = $query['user_id'] ;		// ユーザーID
					$screen_name = $query['screen_name'] ;		// スクリーンネーム

					// 出力する
					$html = '' ;
					$html .=  '<h2>実行結果</h2>' ;
					$html .=  '<p>下記の通り、認証情報を取得しました。</p>' ;
					$html .=  '<dl>' ;
					$html .=  	'<dt>アクセストークン</dt>' ;
					$html .=  		'<dd>' . $access_token . '</dd>' ;
					$html .=  	'<dt>アクセストークン・シークレット</dt>' ;
					$html .=  		'<dd>' . $access_token_secret . '</dd>' ;
					$html .=  	'<dt>ユーザーID</dt>' ;
					$html .=  		'<dd>' . $user_id . '</dd>' ;
					$html .=  	'<dt>スクリーンネーム</dt>' ;
					$html .=  		'<dd>' . $screen_name . '</dd>' ;
					$html .=  '</dl>' ;
				}
			}

			// エラーの場合
			if( isset( $error_msg ) && !empty( $error_msg ) )
			{
				$error = '' ;
				$error .= 'アクセストークンを取得できませんでした…。セッションが上手く働いていない可能性があります。' ;
			}
		}

		// セッション終了
		$_SESSION = array() ;
		session_destroy() ;
	}

	// 「キャンセル」をクリックして帰ってきた時
	elseif( isset( $_GET['denied'] ) && !empty( $_GET['denied'] ) )
	{
		// エラーメッセージを出力して終了
		echo 'You have rejected the app...Bye...' ;

		// 何故か昔、迷惑ユーザーをとりあえずYahoo!に飛ばすという謎文化がありました…
		header( 'Location: http://www.yahoo.co.jp/' ) ;

		exit ;
	}

	/*** [手順1] リクエストトークンの取得 ***/
	else
	{
		// [アクセストークンシークレット] (まだ存在しないので「なし」)
		$access_token_secret = '' ;

		// エンドポイントURL
		$request_url = 'https://api.twitter.com/oauth/request_token' ;

		// リクエストメソッド
		$request_method = 'POST' ;

		// キーを作成する (URLエンコードする)
		$signature_key = rawurlencode( $api_secret ) . '&' . rawurlencode( $access_token_secret ) ;

		// パラメータ([oauth_signature]を除く)を連想配列で指定
		$params = array(
			'oauth_callback' => $callback_url ,
			'oauth_consumer_key' => $api_key ,
			'oauth_signature_method' => 'HMAC-SHA1' ,
			'oauth_timestamp' => time() ,
			'oauth_nonce' => microtime() ,
			'oauth_version' => '1.0' ,
		) ;

		// 各パラメータをURLエンコードする
		foreach( $params as $key => $value )
		{
			// コールバックURLだけはここでエンコードしちゃダメ(よ〜、ダメダメ)
			if( $key == 'oauth_callback' )
			{
				continue ;
			}

			// URLエンコード処理
			$params[ $key ] = rawurlencode( $value ) ;
		}

		// 連想配列をアルファベット順に並び替える
		ksort( $params ) ;

		// パラメータの連想配列を[キー=値&キー=値...]の文字列に変換する
		$request_params = http_build_query( $params , '' , '&' ) ;
 
		// 変換した文字列をURLエンコードする
		$request_params = rawurlencode( $request_params ) ;
 
		// リクエストメソッドをURLエンコードする
		$encoded_request_method = rawurlencode( $request_method ) ;
 
		// リクエストURLをURLエンコードする
		$encoded_request_url = rawurlencode( $request_url ) ;
 
		// リクエストメソッド、リクエストURL、パラメータを[&]で繋ぐ
		$signature_data = $encoded_request_method . '&' . $encoded_request_url . '&' . $request_params ;

		// キー[$signature_key]とデータ[$signature_data]を利用して、HMAC-SHA1方式のハッシュ値に変換する
		$hash = hash_hmac( 'sha1' , $signature_data , $signature_key , TRUE ) ;

		// base64エンコードして、署名[$signature]が完成する
		$signature = base64_encode( $hash ) ;

		// パラメータの連想配列、[$params]に、作成した署名を加える
		$params['oauth_signature'] = $signature ;

		// パラメータの連想配列を[キー=値,キー=値,...]の文字列に変換する
		$header_params = http_build_query( $params , '' , ',' ) ;

		// リクエスト用のコンテキストを作成する
		$context = array(
			'http' => array(
				'method' => $request_method , //リクエストメソッド
				'header' => array(			  //カスタムヘッダー
					'Authorization: OAuth ' . $header_params ,
				) ,
			) ,
		) ;

		// cURLを使ってリクエスト
		$curl = curl_init() ;
		curl_setopt( $curl , CURLOPT_URL , $request_url ) ;
		curl_setopt( $curl , CURLOPT_HEADER, 1 ) ; 
		curl_setopt( $curl , CURLOPT_CUSTOMREQUEST , $context['http']['method'] ) ;			// メソッド
		curl_setopt( $curl , CURLOPT_SSL_VERIFYPEER , false ) ;								// 証明書の検証を行わない
		curl_setopt( $curl , CURLOPT_RETURNTRANSFER , true ) ;								// curl_execの結果を文字列で返す
		curl_setopt( $curl , CURLOPT_HTTPHEADER , $context['http']['header'] ) ;			// ヘッダー
		curl_setopt( $curl , CURLOPT_TIMEOUT , 5 ) ;										// タイムアウトの秒数
		$res1 = curl_exec( $curl ) ;
		$res2 = curl_getinfo( $curl ) ;
		curl_close( $curl ) ;

		// 取得したデータ
		$response = substr( $res1, $res2['header_size'] ) ;				// 取得したデータ(JSONなど)
		$header = substr( $res1, 0, $res2['header_size'] ) ;		// レスポンスヘッダー (検証に利用したい場合にどうぞ)

		// [cURL]ではなく、[file_get_contents()]を使うには下記の通りです…
		// $response = @file_get_contents( $request_url , false , stream_context_create( $context ) ) ;

		// リクエストが成功しなかった場合
		if( !isset( $response ) || empty( $response ) )
		{
			$error = 'リクエストが失敗してしまったようです。Twitterからの応答自体がありません…。' ;
		}

		// 成功した場合
		else
		{
			// 文字列を[&]で区切る
			$parameters = explode( '&' , $response ) ;

			// エラー判定
			if( !isset( $parameters[1] ) || empty( $parameters[1] ) )
			{
				$error_msg = true ;
			}
			else
			{
				// それぞれの値を格納する配列
				$query = array() ;

				// [$parameters]をループ処理
				foreach( $parameters as $parameter )
				{
					// 文字列を[=]で区切る
					$pair = explode( '=' , $parameter ) ;

					// 配列に格納する
					if( isset($pair[1]) )
					{
						$query[ $pair[0] ] = $pair[1] ;
					}
				}

				// エラー判定
				if( !isset( $query['oauth_token'] ) || !isset( $query['oauth_token_secret'] ) )
				{
					$error_msg = true ;
				}
				else
				{
					// 本番では出力しない (内容を見たかったら[echo][exit]で見て下さい)
					$html = '' ;
					$html .=  '<h2>実行結果</h2>' ;
					$html .=  '<dl>' ;
					$html .=  	'<dt>oauth_token</dt>' ;
					$html .=  		'<dd>' . $query['oauth_token'] . '</dd>' ;
					$html .=  	'<dt>oauth_token_secret</dt>' ;
					$html .=  		'<dd>' . $query['oauth_token_secret'] . '</dd>' ;
					$html .=  '</dl>' ;

					/*** [手順2] ユーザーを認証画面に移動させる ***/

					// セッション[$_SESSION["oauth_token_secret"]]に[oauth_token_secret]を保存する
					session_start() ;
					session_regenerate_id( true ) ;
					$_SESSION['oauth_token_secret'] = $query['oauth_token_secret'] ;

					// ユーザーを認証画面へ飛ばす
					header( 'Location: https://api.twitter.com/oauth/authorize?oauth_token=' . $query['oauth_token'] ) ;

					// 処理を終了
					exit ;
				}
			}

			// エラーの場合
			if( isset( $error_msg ) && !empty( $error_msg ) )
			{
				$error = '' ;
				$error .= 'リクエストトークンを取得できませんでした…。[$api_key]と[$callback_url]、そしてTwitterのアプリケーションに設定している[Callback URL]を確認して下さい。' ;
				$error .= '([Callback URLに設定されているURL]→<mark>' . $callback_url . '</mark>)' ;
			}
		}
	}

	// エラーメッセージがある場合
	if( isset( $error ) && $error )
	{
		$html .=  '<h2>エラー内容</h2>' ;
		$html .= '<p>' . $error . '</p>' ;
	}

	// 検証用にレスポンスヘッダーを出力 [本番環境では不要]
	$html .= '<h2>取得したデータ</h2>' ;
	$html .= '<p>下記のデータを取得できました。</p>' ;
	$html .= 	'<h3>ボディ</h3>' ;
	$html .= 	'<p><textarea rows="8">' . $response . '</textarea></p>' ;
	$html .= 	'<h3>レスポンスヘッダー</h3>' ;
	$html .= 	'<p><textarea rows="8">' . $header . '</textarea></p>' ;

	// アプリケーション連携の解除
	$html .= '<h2 style="color:red">アプリケーション連携の解除</h2>' ;
	$html .= '<p>このアプリケーションとの連携を解除するには、下記ページより、行なって下さい。</p>' ;
	$html .= '<p><a href="https://twitter.com/settings/applications" target="_blank">https://twitter.com/settings/applications</a></p>' ;
?><!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta name="robots" content="noindex,nofollow">

		<!-- ビューポートの設定 -->
		<meta name="viewport" content="width=device-width, initial-scale=1.0">

		<title>Twitter APIで、アクセストークンを取得するサンプルデモ</title><!-- 

/********************************************************************************

	SYNCER 〜 知識、感動をみんなと同期(Sync)するブログ

	* 配布場所
	https://syncer.jp/twitter-api-matome

	* 動作確認
	https://syncer.jp/twitter-api-matome/demo/get-access-token.php

	* 最終更新日時
	2015/08/10 13:44

	* 作者
	あらゆ

	** 連絡先
	Twitter: https://twitter.com/arayutw
	Facebook: https://www.facebook.com/arayutw
	Google+: https://plus.google.com/114918692417332410369/
	E-mail: info@syncer.jp

	※ バグ、不具合の報告、提案、ご要望など、お待ちしております。
	※ 申し訳ありませんが、ご利用者様、個々の環境における問題はサポートしていません。

********************************************************************************/

		-->
	</head>
<body>



<?php echo $html ?>


<p style="text-align:center"><a href="https://syncer.jp/twitter-api-matome">配布元: Syncer</a></p>






</body>
</html>
